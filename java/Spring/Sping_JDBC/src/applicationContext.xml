<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd 
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util-3.2.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "
	>
	<!--引入外部配置文件  -->
	<context:property-placeholder location="classpath:/jdbc.properties"/>
	
	<!--配置数据源  -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${c3p0.driver}"></property>
		<property name="jdbcUrl" value="${c3p0.url}"></property>
		<property name="user" value="${c3p0.user}"></property>
		<property name="password" value="${c3p0.password}"></property>
	</bean>
	<!--引入模板类  -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!--配置事务管理器
		id:最好叫transactionManager
	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--引入数据源  -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!--配置事务事务通知
		作用:整个系统中的事务策略
		transaction-manager="transactionManager" 默认引用事务管理器
		若事务管理器的id为transactionManager，该配置可以省略，否则就要指定与事务管理器id相等
		id:唯一标识通知
	  -->
	<tx:advice id="txAvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--
				name:需要控制的方法名称  
				propagation:表示事务传播策略
					REQUIRED:该方法必须添加事务,此值为默认值
					NEVER:该方法从不添加事务
					SUPPORTS:如果原来有事务控制，则共用事务;如果原来没有事务，就以非事务的状态运行
				
				read-only="true"
					1.表示当前方法不能更新数据库,是只读的
					2.底层有优化策略,提高执行效率
					
				rollback-for="java.sql.SQLException"
				rollback-for="异常的类型" 当遇到某些特定的异常时,事务回滚
				
				no-rollback-for="java.lang.Exception"
				no-rollback-for="异常的类型" 当遇到某些特定的异常时,事务不回滚
			-->
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!--配置事务切面
		Content Model : (pointcut*, advisor*, aspect*)配置顺序
	  -->
	<aop:config>
		<aop:pointcut expression="execution(* service..*.*(..))" id="pc"/>
		<aop:advisor advice-ref="txAvice" pointcut-ref="pc"/>
	</aop:config>
	
	<!--开启包扫描  -->
	<context:component-scan base-package="*"/>
	
	<!--开启AOP注解  -->
	<aop:aspectj-autoproxy/>
	
	
</beans>
