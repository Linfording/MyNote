1.事务
	事务指逻辑上的一组操作，组成这组操作的各个单元，要么全部成功，要么全部不成功。
	例如:A----B转账
	update account  set  money=money-520 where name='a';
	update account  set  money=money+520 where name='b';

	1.2管理事务
	1.2.1 数据库的默认事务
		数据库默认支持事务的，但是数据库默认的事务是一条sql语句独占一个事务，这种模式，意义不大
	1.2.2 手动控制事务
		start transaction;
	--开启事务，在这条语句之后的所有sql将处在同一事务中，要么同时完成，要么同时不完成;
		.....
	--事务中的sql在执行时，并没有真正修改数据库中的数据
		commit;
	--提交事务，将整个事务对数据库的影响一起发生
		rollback;
	--回滚事务

	1.2.3 JDBC中控制事务
	当JDBC程序向数据库获得一个connection对象时，默认情况下connection对象会自动向数据库提交在他上面发送sql语句。若想关闭这种默认提交方式，让多条SQL在一个事务中执行，可以使用下列语句
	conn.setAutoCommit(false);
	--关闭自动提交后，conn不会帮我们提交事务，在这个链接上执行的所有sql语句将处在同一事务中，需要我们是手动改进进行提交或回滚
	conn.commit;
	--提交事务
	conn.rollback();
	--回滚事务
	也可以设置回滚点回滚部分事务
	Savepoint sp=conn.setSavepoint();
	conn.rollback(sp);
	--注意，回到回滚点后，回滚点之前的代码虽然没被回滚但是也没提交，如果想起作用还要做commit操作。

	案例:
		A转账B 520;B消费了1040;A又挣了1100;

	1.3事务的四大特性
		1.原子性(Atomicity)
		原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生
		2.一致性(Consistency)
		事务前后数据的完整性必须保证一致
		3.隔离性(Isolation)***
		事务的隔离性是指多个用户并发访问数据时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之间数据要互相隔离
		4.持久性(Durability)
		持久性是指一个事物一旦被提交，他对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响

	1.4隔离性
	1.4.1数据库隔离性分析
		数据库可以帮我们保证事务的其他三大特性，而隔离性需要再讨论。
		数据库的隔离性问题本质上是多线程并发安全性问题。
		可以用锁来解决多线程并发安全问题，但是如果用了锁，必然会造成程序的性能大大下降，对于数据库这种高并发要求的程序来说，这是不可接受的。
		隔离性产生的细节：
			如果两个线程并发修够，必然产生多线程并发安全问题，必须隔离开。
			如果两个线程并发查询，必然没有问题，不用考虑。
			如果一个线程修改，一个线程查询，有可能有问题，有可能没问题。
			
	1.5隔离性可能造成的问题
	1.5.1 脏读:
		一个事务读取到另一个事务未提交的数据

		数据库默认处理了脏读的情况，需要设置数据库的隔离级别，才可以看到脏读
		打开两个mysql cmd 都执行以下命令；
		set session transaction isolation level read uncommitted;
		--set session  当前会话有效
		--将当前回话的数据库的隔离级别设置为:read uncommitted(什么都不隔离)

		一个事务读取到另一个事务未提交的数据: a 花钱 ,b 收钱
		---------------------------------
		a	1000
		b	1000
		---------------------------------

		客户端 a:
		1.
		start transaction;
		update user_tran set money=money-100 where name='a';
		update user_tran set money=money+100 where name='b';
		3.
		commit;
			
		客户端 b:
		2.
		start transaction;
		select * from user_tran;
		--------
		a:900
		b:1100
		--------
		//此时a还未提交，b已经可以读取到数据，此为脏读
		commit;
		4.select * from user_tran;

	1.5.2不可重复读
		一个失误多次读取数据库中的同一条记录，多次查询的结果不同(一个事务读取到另一个事务已经提交的数据)

		---------------------------
			活期	定期	固定资产
		a	1000	1000	1000
		---------------------------

		w:
			start transaction;
			select 活期 from account where name='a'
			select 定期 from account where name='a'
			select 固定资产 from account where name='a'

			a:
				start transaction;
				update account set 活期=活期-1000 where name= 'a';
				commit;

		w:
			select 活期+定期+固定资产 from account where name='a';---总资产:2000

	1.5.3 虚读(幻读)
		有可能出现，有可能不出现:一个事务多次查询整表数据,多次查询时由于有其他事务增删数据,造成查询结果不同(一个事务读取到另一个事务已经提交的数据)
		-------------------------
		a 1000
		b 2000
		-------------------------
		z:
		start transaction;
		select sum(money) from account;---总3000
		select count(*) from account;---总2
			------------------
			c:
				start transaction;
				insert into account values('c',3000);
				commit;
			------------------
		z:
			select avg(money) from account;---平均2000；

	1.6数据库的隔离级别
	1.6.1四大隔离级别
		数据库的设计时到底该防止哪些问题？
		防止的问题越多性能越低，防止问题越少安全性越差。
		到底该防止哪些问题应该由数据库的使用者根据具体业务场景来决定，所以数据库的设计者没有把设置哪类问题写死，而是提供了如下选项:
		数据库的四大隔离级别：
		1.read uncommitted;
		--不做任何隔离
		2.read committed；
		--可防止脏读
		3.repeatable read;
		--可防止脏读，不可重复读，但不能防止虚读(幻读)
		4.serializable;
		--可防止所有隔离性的问题，但数据库就被设计为了串行化的数据库，性能很低

		串行化数据库:
			不能并行操作，操作一条一条执行
		从安全性上考虑
		4>3>2>1
		从性能上考虑
		1>2>3>4

		作为数据库的使用者，综合考虑安全性和性能，从四大级别中选择一个可以防止想要防止的问题的隔离级别中性能最高的一个.
			一般不会使用Serializable和Read uncommitted，缺点太明显
			如果需要防止不可重复读选择 repeatable read,如果不需要防止选择 read commited;

			mysql 默认是 Repeatable Read;
			Oracle 默认是Read committed;

	1.7 操作数据库的隔离级别
	1.7.1查询数据库的隔离级别
		select @@tx_isolation;

	1.7.2 修改数据库的隔离级别
	set [session/global] transaction isloation level xxxxx;
	set global transaction isolation level serializable;
	不写默认就是session,修改的是当前客户端和服务器交互时是使用的隔离级别,并不会影响其他客户端的隔离级别
	如果写成global,修改的是数据库默认的隔离级别(即新开客户端时,默认的隔离级别),并不会修改当前客户端和已经开启的客户端的隔离级别 

	1.8 数据库的锁
		锁是一种用来将数据资源与单个事务关联起来的机制，其用途是当某个资源与拥有它的事务关联在一起时，控制其它事务如何与该资源进行交互，通常我们称与被锁定资源关联的事务持有或拥有该锁。数据库用锁来禁止事务访问其它事务写入的未提交数据，并禁止其它事务在拥有该锁的事务使用限制性隔离级别时对这些进行更新，一旦获得了锁，事务终止前就一直持有该锁，该事物终止时释放锁，其它事务就可以使用被解锁的数据资源了。如果一个事务尝试访问数据资源的方式与另一个事务持有的锁不兼容，则该事物必须等待，指导拥有锁的事务终止为止，这种叫锁等待事件，当锁等待事件发生时，尝试访问数据资源的事务所做的只是停止执行，直到拥有锁的事务终止和不兼容的锁释放为止。
	
	1.8.1 共享锁--又称读锁
		若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。
		
		共享锁和共享锁可以共存，共享锁和排他锁不能共存，在非serializable隔离级别做查询不加任何锁，在Serializable隔离级别下做查询加共享锁
	1.8.2 排他锁--又称写锁
		若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。这保证了其他事务在T释放A上的锁之前不能再读取和修改A。

		在任何隔离级别下作增删改都加排他锁
		排他锁和共享锁不能共存，排他锁和排他锁也不能共存--锁加在操作同一表同一数据时
	1.8.3 可能的死锁
		mysql可以自动检测到死锁，强制错误退出一方执行另一方
		实验:
			串行环境下
			a,b客户端开启事务
			a:select 一条数据 不做提交
			b:update 修改同一条数据
			a:update 修改同一条数据
			
			
	1.9更新丢失问题***
	1.9.1 更新丢失问题的产生
		两个并发事务基于同一个查询结果进行修改，后提交的事务忽略了先提交事务对数据库的影响，造成了先提交的事务对数据库的影响丢失，这个问题叫更新丢失

		案例:在线支付案例:
		两个事务同时读取数据的时候，数据还未更改，读操作也只会添加共享锁，不会有排他锁，其他的事务也能进行读操作，所以此时判断支付状态都为未支付。之后的修改支付状态添加金额状态则会添加排他锁，不过两个事务的判断条件是支付状态，所以都已经要执行这个操作了，此时执行也是没有问题的，等到释放排他锁再添加就可以了。解决方案--在查询语句的时候就手动添加上排他锁，因为排他锁存在的时候，其他事务即无法读也无法写，这时就不会出现更新丢失问题。--悲观锁解决方案
		在查询语句后加上for update--手动加了排他锁--悲观锁解决方案
		
	1.9.2 更新丢失解决方案	
		1.将数据库设置为Serializable隔离级别,但是我们一般不会将数据库设置为serializable
		那么在非Serializable下又如何解决更新丢失？
		2.悲观锁:
			在查询时,手动加排他锁,从而在查询时就排除可能的更新丢失
				select * from user for update
		3.乐观锁:
			在表中设计版本字段，在进行修改时，要求更具具体版本进行修改，并将版本字段+1，如果更新失败，说明更新丢失，需要重新进行更新。

		两种方案优缺点：
			查询多，修改少，用乐观锁--修改少则遇到更新丢失的情况少
			修改多于查询，用悲观锁--修改多遇到更新丢失的情况多
========================================================================================================
二、使用事务升级订单添加模块
	1.保证orderServiceImpl类的addOrder方法中用的同一个Connection

	
	问题:
	1.本来仅在dao层出现的conn，却出现了业务层(耦合度高)
	2.使用事务和不使用事务，dao需要两套不同的方法，方法太多(复用性差)
	解决方案:
		2.1 通过第三方类管理conn--TranManager
		把数据库连接对象的相关方法，封装在TranManager中
		2.2 conn的获取
		ThreadLocal
			conn的释放
		1.1 注解+动态代理
		@Tran

三、ThreadLocal
	为不同的线程保存变量

	1.首先，ThreadLocal 不是用来解决共享对象的多线程访问问题的，一般情况下，通过ThreadLocal.set() 到线程中的对象是该线程自己使用的对象，其他线程是不需要访问的，也访问不到的。各个线程中访问的是不同的对象。
	2.另外，说ThreadLocal使得各线程能够保持各自独立的一个对象，并不是通过ThreadLocal.set()来实现的，而是通过每个线程中的new 对象 的操作来创建的对象，每个线程创建一个，不是什么对象的拷贝或副本。
	通过ThreadLocal.set()将这个新创建的对象的引用保存到各线程的自己的一个map中，每个线程都有这样一个map，执行ThreadLocal.get()时，各线程从自己的map中取出放进去的对象，因此取出来的是各自自己线程中的对象，ThreadLocal实例是作为map的key来使用的。 
	如果ThreadLocal.set()进去的东西本来就是多个线程共享的同一个对象，那么多个线程的ThreadLocal.get()取得的还是这个共享对象本身，还是有并发访问问题。


	源码分析:http://www.iteye.com/topic/103804
	因此ThreadLocal实例的变量只有这个threadLocalHashCode，而且是final的，用来区分不同的ThreadLocal实例，ThreadLocal类主要是作为工具类来使用，那么ThreadLocal.set()进去的对象是放在哪儿的呢？ 
		ThreadLocalMap map = Thread.currentThread().threadLocals;  
	这个ThreadLocalMap 类是ThreadLocal中定义的内部类，但是它的实例却用在Thread类中 

	public class Thread implements Runnable {  
	    ......  
	  
	    /* ThreadLocal values pertaining to this thread. This map is maintained 
	     * by the ThreadLocal class. */  
	    ThreadLocal.ThreadLocalMap threadLocals = null;    
	    ......  
	}  
