3.Cluster安装配置
	3.1安装Ruby
		yum install ruby
		ruby –v		#ruby 1.8.7
		yum install rubygems	#也可以一句执行 yum install ruby rubygems -y
		gem install redis		#安装redis的接口包
		gem list		#查看是否安装了gem相关的接口包
	3.2安装redis
	3.3创建节点
	3.4创建目录
		由于cluster的特点，与redis传统主从不同的是，cluster中的节点需要配置在不同的文件夹，否则无法创建集群（尝试过一次，失败）。进入redis根目录，创建节点文件夹，同一个服务器上的不同节点文件夹可以用端口号来命名即可。

		3.4.1创建多个目录
		mkdir 7000 7001 7002 7003 7004 7005 7006 7007 7008 7009 
		
		3.4.2修改配置文件redis.conf
			P61		bind 127.0.0.1//默认ip为127.0.0.1改为其他节点机器可访问的ip 
			P80		protected-mode no		//yes修改为no
			P84		port 7000 				//端口7000 
			P128	daemonize yes 			//后台运行 
			P150	pidfile /usr/local/src/redis/redis3.2.6/redis_7000.pid //pidfile文件对应7000 
			P593	appendonly yes			//默认是rdb方式持久化要改成AOF模式
			P163	logfile=7000/redis.log	//相对路径，启动时在redis的根目录
			P721	cluster-enabled yes 	//开启集群 
			P729	cluster-config-file nodes_7000.conf 		//集群的配置 
			P735	cluster-node-timeout 15000 	//请求超时 默认15秒，可自行设置

			:%s/7000/7001/g	#替换所有7000为7001
		
		3.4.3启动
			先为每个节点创建一个目录，复制redis.conf进去，然后按上面修改内容，修改好后，启动每个实例。
			vim start.sh		#创建脚本文件方便启动
			bash start			#执行shell脚本
			#!/bin/sh
			redis-server 7000/redis.conf &
			redis-server 7001/redis.conf &
			redis-server 7002/redis.conf &
			redis-server 7003/redis.conf &
			redis-server 7004/redis.conf &
			redis-server 7005/redis.conf &
			redis-server 7006/redis.conf &
			redis-server 7007/redis.conf &
			redis-server 7008/redis.conf &

		3.4.4启动集群
			Redis Cluster集群需要ruby来运行其脚本
			./src/redis-trib.rb create --replicas 1 192.168.163.201:7000 192.168.163.201:7001 192.168.163.201:7002 192.168.163.201:7003 192.168.163.201:7004 192.168.163.201:7005 192.168.163.201:7006 192.168.163.201:7007 192.168.163.201:7008
			--replicas 1 表示希望为集群中的每个主节点创建一个从节点（一主一从）
			前几个自动做为主，后面几个做为从，主节点少于从节点，个数不对应时，多从挂接都一个主上。

			常见错误:
			Increased maximum number of open files to 10032 (it was originally set to 1024).
	4395:M 09 Nov 00:46:35.768 # Creating Server TCP listening socket 192.168.163.1:6379: bind: Cannot assign requested address

			新装的linux默认只有1024，当负载较大时，会经常出现error: too many open files
			ulimit -a：使用可以查看当前系统的所有限制值
			vim /etc/security/limits.conf
			在文件的末尾加上
			* soft nofile 65535
			* hard nofile 65535

			执行su或者重新关闭连接用户再执行ulimit -a就可以查看修改后的结果。


			注意：redis-trib-rb的路径，可以配置环境变量来解决
			export PATH=/usr/local/ruby-2.1.2/bin;&PATH
			#检查节点
			/usr/local/src/redis/redis-3.2.5/src/redis-trib.rb check 176.129.1.27:7001
		3.4.5启动错误
			启动后会自动产生这些文件，重新启动时需要删除！
			rm -rf dump.rdb	#删除redis的备份文件，redis节点中有数据，无法建立集群
			rm -rf nodes-700*	#删除没有建立成功集群时遗留的文件

		3.4.6启动集群
			redis-cli -c -p 7000			#任何一个端口都可以，执行命名会自动跳转

			cluster info

			cluster nodes	#查看集群节点状态

		3.4.7查看集群状态
			cluster info

			127.0.0.1:7001> cluster info
			cluster_state:ok
			cluster_slots_assigned:16384
			cluster_slots_ok:16384
			cluster_slots_pfail:0
			cluster_slots_fail:0
			cluster_known_nodes:9
			cluster_size:4
			cluster_current_epoch:9
			cluster_my_epoch:2
			cluster_stats_messages_sent:638
			cluster_stats_messages_received:638

		3.4.8 cluster nodes	#查看集群节点状态

			af62968f2b83a3bf3cc86faca4b80c5ceea176f1 176.129.1.27:7005 slave 7f77320091afb3b6778a89d1fdba21d3be060235 0 1497923824572 6 connected

			593e58ccbcfb694d11e1a78b08f8829f3481247e 176.129.1.27:7004 slave 7a6998924635443bd2af4784a6f5d8af2e07dd40 0 1497923824471 5 connected

			f4095b398d474be5fec43ef17dcfe41ef450cfa3 176.129.1.27:7002 master - 0 1497923826591 3 connected 8192-12287

			3c84ba2c6372e51b423e43f61cd42d4f75958cf6 176.129.1.27:7008 slave 7a6998924635443bd2af4784a6f5d8af2e07dd40 0 1497923823562 9 connected

			f19fed8454535d781e04c5e3b1a620fac643b7dd 176.129.1.27:7007 slave 2eda4f23a7d53d3a9aaea01b89937e7f7042ed0c 0 1497923825077 8 connected

			7a6998924635443bd2af4784a6f5d8af2e07dd40 176.129.1.27:7000 master - 0 1497923820533 1 connected 0-4095

			7f77320091afb3b6778a89d1fdba21d3be060235 176.129.1.27:7001 myself,master - 0 0 2 connected 4096-8191

			2eda4f23a7d53d3a9aaea01b89937e7f7042ed0c 176.129.1.27:7003 master - 0 1497923824572 4 connected 12288-16383

			7f5392e69960e6310e0dee4689e2942f190a0763 176.129.1.27:7006 slave f4095b398d474be5fec43ef17dcfe41ef450cfa3 0 1497923825581 7 connected
			=========================================
			cluster nodes 命令的输出有点儿复杂， 它的每一行都是由以下信息组成的：
节点 ID ：例如 3fc783611028b1707fd65345e763befb36454d73 。
ip:port ：节点的 IP 地址和端口号， 例如 127.0.0.1:7000 ， 其中 :0 表示的是客户端当前连接的 IP 地址和端口号。
flags ：节点的角色（例如 master 、 slave 、 myself ）以及状态（例如 fail ，等等）。
如果节点是一个从节点的话， 那么跟在 flags 之后的将是主节点的节点 ID ： 例如 127.0.0.1:7002 的主节点的节点 ID 就是 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e 。
master节点最后有一个值的范围，就是hash槽，0~16383（2^14），平均的分配到各master节点。