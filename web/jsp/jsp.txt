一.JSP概述
	由SUN公司提供的动态web资源的开发技术, 看起来非常像html, 但是可以在JSP页面中写java代码, 所以JSP是一种动态web资源开发技术

	(1)JSP的出现是为了解决Servlet在响应时不适合向外输出页面的问题
		Servlet本质上是一段java代码, 非常适合处理逻辑, 但是不合适向外输出页面。
		HTML适合用来开发页面, 展示数据, 但是HTML开发出来的页面本质上就是一个文档, 无法展示动态的数据。
		JSP非常适合编写HTML代码, 适合作为响应页面向外输出, 同时JSP里可以写java代码, 也可以展示动态的数据。
		所以JSP可以解决既要处理逻辑又要向外输出页面的难题。

	(2)JSP在第一次访问时, 会被翻译成一个Servlet, 对JSP访问后看到的页面 其实就是翻译后的Servlet在向外输出！！
		
二.JSP语法
	1.模版元素: 
		直接写在jsp页面中的html内容称之为jsp页面中的模版元素
		模版元素在翻译过来的Servlet中被out.write()原样输出到浏览器中
	2.脚本表达式: 
		<%= 脚本表达式 %> 
		在翻译过来的Servlet中, 计算表达式的值原样输出

	3.脚本片段: <% 若干java语句 %>
		int a = 3+4;
		int b = 100;
		在翻译过来的servlet中, 脚本片段被复制粘贴到对应位置执行
		多个脚本片段之间的变量可以互相访问
		在某一个脚本片段中的java代码可以是不完整的, 但是要求在翻译过来的servlet中整体的代码必须是完整符合java语法的
		
	4.JSP声明:
		<%! java代码 %>
			写在jsp声明中的内容, 在翻译过来的servlet中会和servlet方法平级成为类的成员

	5.JSP注释:
		<%-- JSP注释 --%>
		<%-- out.write("aaa"); --%> 被JSP注释注释的内容, 在翻译的过程中被抛弃, 不会被翻译
		<% //out.write("bbb"); %> 被java注释注释的内容, 在翻译的过程中被当作脚本片段翻译到servlet中, 但是由于被注释了, 所以也不会执行
		<!-- <% out.write("ccc"); %> --> 被HTML注释注释的内容, 在翻译过程中直接当作模版元素原样输出到浏览器, 但是浏览器认为是注释, 所以不予显示
		*所以在jsp中最好用第一种jsp注释，html注释会执行出来慎用
	6.JSP指令:
		<%@ 指令名称 若干属性声明... %> 
			-- 不会直接产生输出, 用来指挥解析引擎如何来翻译当前JSP页面中其他部分的内容
			(1)page指令 -- 用来声明当前JSP页面的基本属性的, page指令可以写在JSP页面的任意位置, 但是为了可读性考虑, 一般情况下最好放在JSP页面的最前面
			<%@ page ... %>
				~[ language="java" ] 当前JSP使用的开发语言 
				~[ extends="package.class" ] 当前JSP翻译成servlet后要继承的类，注意此值必须是一个servlet的子类，一般情况下不要改

				!![ import="{ package.class | package.*}, ..." ] 
					导入需要使用到的包 
					java.lang.*; javax.servlet.*; javax.servlet.JSP.*; javax.servlet.http.*;	
					可以在一个page指令的import属性中导入多个包  也可以通过多个page指令来分别导包

				![ session="true | false" ] 用来指定当前页面是否使用session，如果设置为true，则翻译过来的servlet中将会有对session对象的引用，于是可以直接在JSP中使用session隐式对象。但是这将导致一旦访问JSP就会调用request.getSession()方法，可能导致不必要的空间浪费。如果确定JSP中不需要session可以设为false

				[ errorPage="relative_url" ] 如果页面出错，将要跳转到的页面，除了在JSP中使用此属性指定错误页面外也可以在web.xml中配置整个web应用的错误页面，如果两个都设置则JSP中的此属性起作用
					<error-page>
						<exception-type>java.lang.Throwable</exception-type>
						<location>/error/500.jsp</location>
					</error-page> -->
					<error-page>
						<error-code>404</error-code>
						<location>/error/404.jsp</location>
					</error-page>
					
				[ isErrorPage="true | false" ] 如果设置此属性为false, 翻译过来的servlet中将不会含有Exception隐式对象,其中封装的就是上一个页面中抛出的异常信息

				!!![ pageEncoding="characterSet | ISO-8859-1" ] 服务器翻译JSP时使用的编码集.
					如果想防止JSP乱码,应该保证文件的保存编码和JSP翻译成servlet用的编码以及输出到浏览器后浏览器打开的编码一致.此属性一旦设置好,翻译引擎会间接帮我们设置content-type属性.

				[ buffer="none | 8kb | sizekb" ] out隐式对象所使用的缓冲区的大小
				[ autoFlush="true | false" ] out隐式对象是否自动刷新缓冲区，默认为true，不需要更改
				[ isThreadSafe="true | false" ] 翻译过来的servlet是否实现SingleThreadModel
			
			~include指令
				<%@ include file="" %> -- 可以实现页面包含的效果
				
				include指令实现的包含叫做静态包含: 
					多个JSP文件翻译成一个servlet, 最终由这一个servlet向外输出数据, 这是源文件级别的包含
				其他方式的包含叫做动态包含: 
					被包含的页面各自翻译成servlet, 包含的过程其实就是各个servlet分别执行后在输出流上的合并

				总结: 静态包含在效率上更高一些, 尽量使用静态包含.

			~taglib指令
				导入tld标签库文件

三.JSP的九大隐式对象
	JSP翻译引擎在将JSP翻译成servlet的过程中, 在servlet里预先定义了九个对象, 因此我们可以在JSP页面中直接使用这九个对象
	page	Servlet
	request	request
	response	response
	config	ServletConfig
	application ServletContext
	session	Session
	exception
	~~out
	!!!pageContext
	
	~~1.out
		相当于response.getWriter();
		区别在于out对象自带缓冲区, 如果out和response.getWriter()混用可能会造成输出顺序上混乱
		page指令中buffer和autoflush就是用来设置out缓冲区的
		总结起来一句话, 如果想要在JSP页面中输出内容, 直接使用out, 尽量别使用response.getWriter();

	!!!2.pageContext
		代表当前JSP页面的运行环境的对象, 通过该对象可以访问页面中的共享数据。
		!!!(1) 作为入口对象获取其他八大隐式对象
			getPage方法	返回page隐式对象
			getRequest方法	返回request隐式对象 
			getResponse方法	返回response隐式对象 
			getServletConfig方法	返回config隐式对象
			getServletContext方法	返回application隐式对象
			getSession方法	返回session隐式对象 
			getException方法	返回exception隐式对象 
			getOut方法	返回out隐式对象

		!!!(2) 本身也是一个域对象, 也可以作为入口对象来操作其他三大作用域中的数据
			a)本身是个域对象
				setAttribute(String name, Object obj);
				getAttribute(String name);
				removeAttribute(String name);
				getAttributeNames();

				生命周期: 访问JSP页面开始时创建, 访问JSP页面结束时销毁
				作用范围: 当前JSP页面
				主要功能: 在当前JSP页面中共享数据

		ServletContext > Session > request > pageContext
				
			b)入口对象, 可以操作其他三大作用域
				getAttribute(String name,int scope)
				setAttribute(String name, Object value,int scope)
				removeAttribute(String name,int scope)

				其中pageContext中代表域的常量：
				PageContext.APPLICATION_SCOPE
				PageContext.SESSION_SCOPE
				PageContext.REQUEST_SCOPE
				PageContext.PAGE_SCOPE 
			
			额外提供了:
				findAttribute(String name); //按照由小到大的顺序在四大作用域中搜寻指定名称的属性, 如果找到就返回, 如果都找不到就返回一个null
			ServletContext > session > request > pageContext

		~~(3) 提供了便捷方法实现请求转发和包含
			request.getRequestDispatcher("/7.jsp").forward(request, response);

			request.getRequestDispatcher("/7.jsp").include(request, response);
			<%@include file="xxx.jsp" %>
			
			pageContext.forward("7.jsp"); 
			pageContext.include("7.jsp");

====================================================
四.JSP标签技术
	在JSP页面中写入大量的java代码会导致JSP页面中html代码和java代码混杂在一起, 会造成页面非常的混乱, 难于维护
	于是在JSP的2.0版本中, sun提出了JSP标签技术,  推荐使用标签来代替JSP页面中java代码, 并且推荐, JSP2.0以后不要在JSP页面中出现任何一行java代码。

	~~1.JSP标签 -- sun开发的JSP页面的标签技术, 包含了不少标签, 但是不太好用, 我们只要求掌握三个
		<jsp:forward>用来替代request.getRequestDispatcher().forward()
		<jsp:include>用来替代request.getRequestDispatcher().include()
		<jsp:param>配合前两个标签使用，可以在包含或转发时，带一些参数过去

	!!!2.el表达式 -- 表达式, 可以非常方便的替代JSP页面中的JSP脚本表达式
		基本结构: ${ 表达式 }
		只能获取不能设置!!!
		只能获取不能遍历!!!
		(1) 获取数据
			**获取常量: 支持 数字/字符串/布尔值, 整个el表达式的值就是当前常量的值
			**获取变量: el表达式可以获取变量的值, 在获取时它的底层会调用pageContext的findAttribute()方法按照由小到大的顺序在四大作用中搜寻指定名称的值, 如果找到就直接返回该值, 如果找不到就什么也不输出
			**获取数组中的数据: 可以通过 数组变量名[数字] 来获取域中数组中的内容
			**获取集合中的数据: 可以通过 集合变量名[数字] 来获取域中集合中的内容
			**获取map中的数据: 可以通过 map变量名[键] 或者是 map变量名.键 获取map中的数据
			
			**获取javaBean中的属性: 在获取javaBean中的属性值时, 点什么就相当于get什么(比如: p.username <==> p.getUsername()) 
				## 之前获取web应用的名称是通过 <%= request.getContextPath() %>
				但是这种写法不推荐, 推荐使用el表达式来获取: ${ pageContext.request.contextPath }			
		(2) 执行运算
			算术运算
				在El表达式中, 加号只是一个运算符, 不能作为连接符使用. 
				在进行算术运算时, 对于非数字会试图先转换成数字再参与运算, 如果转换不成功就会报错!!
			关系运算
				> gt
				< lt
				>= ge
				<= le
				!= ne
				== eq
			逻辑运算
				&&	and
				||	or
				!	not
			三元表达式

			???empty运算: 
				判断对象是否为null, 
				判断字符串是否为空字符串, 
				判断数组是否为空数组, 
				判断集合中是否没有任何元素, 
				判断域对象中是否没有任何属性
			
		(3) 获取常用开发对象
			el中内置了11个常用对象, 可以不用预先存入域中就可以使用

			代表当前JSP页面环境的pageContext对象
				!!!pageContext - 有了它就意味着el中就有了其他八大隐式对象

			代表四大作用域的隐式对象, 用来明确指定从哪个域中查找数据
				!!!pageScope
				!!!requestScope
				!!!sessionScope
				!!!applicationScope

			请求参数组成的map
				!!!param - Map<String, String>
				paramValues - Map<String, String[]>

			请求头组成的map
				header -- Map<String, String>
				headerValues - Map<String, String[]>
					key为请求头的名字
			所有cookie信息组成的map
				!!!cookie -- Map<String, Cookie>
					key为Cookie的名字, 值为Cookie对象
			所有web应用初始化信息组成的map
				initParam -- Map<String, String>
					key初始化参数的名字, value为参数对应的值
					
	3.jstl标签库 -- 通用的JSP标签库 提供了实现java代码中最常见功能的操作标签
		为javaweb开发人员提供的一套标准通用的标签库, 可以和el配合起来替JSP页面中的大部分的java代码
		javaee4.0及其之前的版本中, 在使用前需要导入jstl开发包, 在javaee5.0及其以后版本中内置了jstl开发包, 所以不需要我们手动导入就可以直接使用了!!

		<c:out> 标签用于输出一段文本内容到pageContext对象当前保存的“out”对象中。
		!!!<c:set>标签用于把某一个对象存在指定的域范围内，或者设置Web域中的java.util.Map类型的属性对象或JavaBean类型的属性对象的	属性。  
		<c:remove>标签用于删除各种Web域中的属性
		<c:catch>标签用于捕获嵌套在标签体中的内容抛出的异常，其语法格式如下：<c:catch [var="varName"]>nested actions</c:catch>
		!!!<c:if test=“”>标签可以构造简单的“if-then”结构的条件表达式 
		!!!<c:choose>标签用于指定多个条件选择的组合边界，它必须与<c:when>和<c:otherwise>标签一起使用。使用<c:choose>，<c:when>和<c:otherwise>三个标签，可以构造类似 “if-else if-else” 的复杂条件判断结构。
		!!!<c:forEach>标签用于对一个集合对象中的元素进行循环迭代操作，或者按指定的次数重复迭代执行标签体中的内容。 
		<c:forTokens>用来浏览一字符串中所有的成员，其成员是由定义符号所分隔的
		<c:param>标签  在JSP页面进行URL的相关操作时，经常要在URL地址后面附加一些参数。<c:param>标签可以嵌套在<c:import>、<c:url>或<c:redirect>标签内，为这些标签所使用的URL地址附加参数。
 		<c:import> 标签,实现include操作
 		<c:url>标签用于在JSP页面中构造一个URL地址，其主要目的是实现URL重写。URL重写就是将会话标识号以参数形式附加在URL地址后面 
		<c:redirect>标签用于实现请求重定向 
		
五.软件分层
	javaee的开发模式的发展：参看图

	MVC设计思想：Model-View-Control，软件编程的通用的设计思想。mvc设计思想认为，任何软件都可以分为: 负责程序控制的控制器、负责封装数据处理数据的模型、负责展示数据的视图来组成的。MVC设计思想要求一个符合MVC设计思想的软件，应该尽量的让这三者互相独立，互补干扰，每个模块只做自己该做的事情，一个模块的变化不应该影响其他模块。好处是 软件的结构更加的清晰，便于开发维护，模块可以实现复用。

	案例：使用JavaEE的经典三成架构重构EasyMall
	分包：
		cn.tedu.web
				.service
				.dao
				.domain
				.utils
				.exception
				.factory(后面会用工厂设计模式 进行层与层之间的解耦 先留着, 暂时用不到)
	导入开发包：
		~junit
		~jstl
		c3p0.jar
		mysql-connector-java.jar

	配置文件：
		c3p0-config.xml
	1.index.jsp
	2.注册
		regist.jsp
		RegistServlet 
			验证验证码、获取用户提交的注册信息封装数据到javabean中 校验数据(非空校验、两次密码是否一致、邮箱格式...)  调用Service的用户注册的方法 注册失败就提示 成功则提示成功回到主页
		UserService  
			检查用户名是否已经存在(调用dao根据用户名查找该用户，找到则存在，找不到就不存在) 如果不存在 调用dao中的方法将用户信息存入数据库
		UserDao 根据用户名查找用户 增加用户信息到数据库中的方法
		
	3.登陆
		login.jsp
		LoginServlet 获取用户名密码 调用Service根据用户名密码找用户 找到则登陆返回主页 找不到提示用户名密码不正确
		UserService 根据用户名密码查找用户
		UserDao 根据用户名密码查找用户		
	4.注销

	5.Ajax检查用户名
	
		