多线程问题
1.多线程的三种启动方式
	
	1.1继承Thread类实现多线程
		创建自己的线程类:
		public class MyThread extends Thread {  
		　　public void run() {  
		　　 System.out.println("MyThread.run()");  
		　　}  
		}  
		启动:
		MyThread myThread1 = new MyThread();  
		MyThread myThread2 = new MyThread();  
		myThread1.start();  
		myThread2.start();  

	1.2实现Runnable接口方式实现多线程
		创建自己的线程类:
		public class MyThread extends OtherClass implements Runnable {  
		　　public void run() {  
		　　 System.out.println("MyThread.run()");  
		　　}  
		}  
		
		为了启动MyThread，需要首先实例化一个Thread，并传入自己的MyThread实例：
		MyThread myThread = new MyThread();  
		Thread thread = new Thread(myThread);  
		thread.start(); 

	1.3使用ExecutorService、Callable、Future实现有返回结果的多线程
		ExecutorService、Callable、Future这个对象实际上都是属于Executor框架中的功能类。想要详细了解Executor框架的可以访问http://www.javaeye.com/topic/366591 ，这里面对该框架做了很详细的解释。返回结果的线程是在JDK1.5中引入的新特征，确实很实用，有了这种特征我就不需要再为了得到返回值而大费周折了，而且即便实现了也可能漏洞百出。
		可返回值的任务必须实现Callable接口，类似的，无返回值的任务必须Runnable接口。执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了，再结合线程池接口ExecutorService就可以实现传说中有返回结果的多线程了。下面提供了一个完整的有返回结果的多线程测试例子，在JDK1.5下验证过没问题可以直接使用。代码如下：

2.线程同步的方式:
	线程同步
		1.线程同步的目的是为了保护多个线程反问一个资源时对资源的破坏。
		2.线程同步方法是通过锁来实现，每个对象都有切仅有一个锁，这个锁与一个特定的对象关联，线程一旦获取了对象锁，其他访问该对象的线程就无法再访问该对象的其他非同步方法。
		3.对于静态同步方法，锁是针对这个类的，锁对象是该类的Class对象。静态和非静态方法的锁互不干预。一个线程获得锁，当在一个同步方法中访问另外对象上的同步方法时，会获取这两个对象锁。
		4.对于同步，要时刻清醒在哪个对象上同步，这是关键。
		5.编写线程安全的类，需要时刻注意对多个线程竞争访问资源的逻辑和安全做出正确的判断，对“原子”操作做出分析，并保证原子操作期间别的线程无法访问竞争资源。
		6.当多个线程等待一个对象锁时，没有获取到锁的线程将发生阻塞。
		7.死锁是线程间相互等待锁锁造成的，在实际中发生的概率非常的小。真让你写个死锁程序，不一定好使。但是，一旦程序发生死锁，程序将死掉。				
	2.1 synchronized同步方法
		即有synchronized关键字修饰的方法。 由于java的每个对象都有一个内置锁，当用此关键字修饰方法时， 内置锁会保护整个方法。在调用该方法前，需要获得内置锁，否则就处于阻塞状态。
		注： synchronized关键字也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个类。
			给一个方法增加synchronized修饰符之后就可以使它成为同步方法，这个方法可以是静态方法和非静态方法，但是不能是抽象类的抽象方法，也不能是接口中的接口方法。

	2.2 synchronized同步代码块
		即有synchronized关键字修饰的语句块。 被该关键字修饰的语句块会自动被加上内置锁，从而实现同步
		synchronized(object){ 
		}
		注：同步是一种高开销的操作，因此应该尽量减少同步的内容。通常没有必要同步整个方法，使用synchronized代码块同步关键代码即可。
		 package com.xhj.thread;
	 
	    /**
	     * 线程同步的运用
	     * 
	     * @author XIEHEJUN
	     * 
	     */
	    public class SynchronizedThread {
	        class Bank {
	            private int account = 100;
	            public int getAccount() {
	                return account;
	            }
	            /**
	             * 用同步方法实现
	             * @param money
	             */
	            public synchronized void save(int money) {
	                account += money;
	            }
	            /**
	             * 用同步代码块实现
	             * @param money
	             */
	            public void save1(int money) {
	                synchronized (this) {
	                    account += money;
	                }
	            }
	        } 
	        
	        class NewThread implements Runnable {
	            private Bank bank;
	 
	            public NewThread(Bank bank) {
	                this.bank = bank;
	            }
	 
	            @Override
	            public void run() {
	                for (int i = 0; i < 10; i++) {
	                    // bank.save1(10);
	                    bank.save(10);
	                    System.out.println(i + "账户余额为：" + bank.getAccount());
	                }
	            }
	 
	        }
	        /**
	         * 建立线程，调用内部类
	         */
	        public void useThread() {
	            Bank bank = new Bank();
	            NewThread new_thread = new NewThread(bank);
	            System.out.println("线程1");
	            Thread thread1 = new Thread(new_thread);
	            thread1.start();
	            System.out.println("线程2");
	            Thread thread2 = new Thread(new_thread);
	            thread2.start();
	        }
	 
	        public static void main(String[] args) {
	            SynchronizedThread st = new SynchronizedThread();
	            st.useThread();
	        }
	    	
	2.3 wait与notify
	  	wait()该方法属于Object的方法，wait方法的作用是使得当前调用wait方法所在部分（代码块）的线程停止执行，并释放当前获得的调用wait所在的代码块的锁，并在其他线程调用notify或者notifyAll方法时恢复到竞争锁状态（一旦获得锁就恢复执行）。
	  	
		wait():使一个线程处于等待状态，并且释放所持有的对象的lock。
		sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。
		notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。
		Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。

		调用wait方法需要注意几点：
	    第一点：wait被调用的时候必须在拥有锁（即synchronized修饰的）的代码块中。
	    第二点：恢复执行后，从wait的下一条语句开始执行，因而wait方法总是应当在while循环中调用，以免出现恢复执行后继续执行的条件不满足却继续执行的情况。
	    第三点：若wait方法参数中带时间，则除了notify和notifyAll被调用能激活处于wait状态（等待状态）的线程进入锁竞争外，在其他线程中interrupt它或者参数时间到了之后，该线程也将被激活到竞争状态。
	    第四点：wait方法被调用的线程必须获得之前执行到wait时释放掉的锁重新获得才能够恢复执行。


		notify方法通知调用了wait方法，但是尚未激活的一个线程进入线程调度队列（即进入锁竞争），注意不是立即执行。并且具体是哪一个线程不能保证。另外一点就是被唤醒的这个线程一定是在等待wait所释放的锁。
	    notifyAll方法则唤醒所有调用了wait方法，尚未激活的进程进入竞争队列。

	2.4 使用特殊域变量(volatile)实现线程同步
		a.volatile关键字为域变量的访问提供了一种免锁机制
	    b.使用volatile修饰域相当于告诉虚拟机该域可能会被其他线程更新
	    c.因此每次使用该域就要重新计算，而不是使用寄存器中的值 
	    d.volatile不会提供任何原子操作，它也不能用来修饰final类型的变量 

	    例如： 
	        在上面的例子当中，只需在account前面加上volatile修饰，即可实现线程同步。 
	    
	    代码实例： 
	        //只给出要修改的代码，其余代码与上同
	        class Bank {
	            //需要同步的变量加上volatile
	            private volatile int account = 100;
	 
	            public int getAccount() {
	                return account;
	            }
	            //这里不再需要synchronized 
	            public void save(int money) {
	                account += money;
	            }
	        }

	    注：多线程中的非同步问题主要出现在对域的读写上，如果让域自身避免这个问题，则就不需要修改操作该域的方法。 
	    用final域，有锁保护的域和volatile域可以避免非同步的问题。 
		
	2.5 使用重入锁实现线程同步
		在JavaSE5.0中新增了一个java.util.concurrent包来支持同步。 
		ReentrantLock类是可重入、互斥、实现了Lock接口的锁，它与使用synchronized方法和快具有相同的基本行为和语义，并且扩展了其能力。
		ReenreantLock类的常用方法有：
			ReentrantLock() : 创建一个ReentrantLock实例 
			lock() : 获得锁 
			unlock() : 释放锁 
			
		注：ReentrantLock()还有一个可以创建公平锁的构造方法，但由于能大幅度降低程序运行效率，不推荐使用 
	        
	    例如： 
	        在上面例子的基础上，改写后的代码为: 
	       //只给出要修改的代码，其余代码与上同
	        class Bank {
	            
	            private int account = 100;
	            //需要声明这个锁
	            private Lock lock = new ReentrantLock();
	            public int getAccount() {
	                return account;
	            }
	            //这里不再需要synchronized 
	            public void save(int money) {
	                lock.lock();
	                try{
	                    account += money;
	                }finally{
	                    lock.unlock();
	                }
	                
	            }
	        }
	        
	    注：关于Lock对象和synchronized关键字的选择： 
	        a.最好两个都不用，使用一种java.util.concurrent包提供的机制，能够帮助用户处理所有与锁相关的代码。 
	        b.如果synchronized关键字能满足用户的需求，就用synchronized，因为它能简化代码 
	        c.如果需要更高级的功能，就用ReentrantLock类，此时要注意及时释放锁，否则会出现死锁，通常在finally代码释放锁 
		
	2.6 使用局部变量实现线程同步
		前面5种同步方式都是在底层实现的线程同步，但是我们在实际开发当中，应当尽量远离底层结构。 使用javaSE5.0版本中新增的java.util.concurrent包将有助于简化开发。 本小节主要是使用LinkedBlockingQueue<E>来实现线程的同步 LinkedBlockingQueue<E>是一个基于已连接节点的，范围任意的blocking queue。 队列是先进先出的顺序（FIFO），关于队列以后会详细讲解~LinkedBlockingQueue 类常用方法 LinkedBlockingQueue() : 创建一个容量为Integer.MAX_VALUE的LinkedBlockingQueue put(E e) : 在队尾添加一个元素，如果队列满则阻塞 size() : 返回队列中的元素个数 take() : 移除并返回队头元素，如果队列空则阻塞代码实例： 实现商家生产商品和买卖商品的同步

 

		注：BlockingQueue<E>定义了阻塞队列的常用方法，尤其是三种添加元素的方法，我们要多加注意，当队列满时：
		　　add()方法会抛出异常
		　　offer()方法返回false
		　　put()方法会阻塞

		使用原子变量实现线程同步
		需要使用线程同步的根本原因在于对普通变量的操作不是原子的。
		那么什么是原子操作呢？原子操作就是指将读取变量值、修改变量值、保存变量值看成一个整体来操作即-这几种行为要么同时完成，要么都不完成。在java的util.concurrent.atomic包中提供了创建了原子类型变量的工具类，使用该类可以简化线程同步。其中AtomicInteger 表可以用原子方式更新int的值，可用在应用程序中(如以原子方式增加的计数器)，但不能用于替换Integer；可扩展Number，允许那些处理机遇数字类的工具和实用工具进行统一访问。

		AtomicInteger类常用方法：
			AtomicInteger(int initialValue) : 创建具有给定初始值的新的
			AtomicIntegeraddAddGet(int dalta) : 以原子方式将给定值与当前值相加
			get() : 获取当前值

		代码实例：

		只改Bank类，其余代码与上面第一个例子同

			class Bank {
			    private AtomicInteger account = new AtomicInteger(100);
			    public AtomicInteger getAccount() {
			        return account; 
			    } 
			    public void save(int money) {
			        account.addAndGet(money);
			    }
			}
			
		补充--原子操作主要有：
		对于引用变量和大多数原始变量(long和double除外)的读写操作；　　
		对于所有使用volatile修饰的变量(包括long和double)的读写操作。

3.ThreadLocal
	ThreadLocal作用:
		不是用来解决对象共享访问问题的，而主要是提供了线程保持对象的方法和避免参数传递的方便的对象访问方式。
		
	ThreadLocal的应用场合:
		最适合的是按线程多实例（每个线程对应一个实例）的对象的访问，并且这个对象很多地方都要用到。

	ThreadLocal实现:
		1.每个线程中都有一个自己的ThreadLocalMap类对象，可以将线程自己的对象保持到其中，各管各的，线程可以正确的访问到自己的对象。 
		2.将一个共用的ThreadLocal静态实例作为key，将不同对象的引用保存到不同线程的ThreadLocalMap中，然后在线程执行的各处通过这个静态ThreadLocal实例的get()方法取得自己线程保存的那个对象，避免了将这个对象作为参数传递的麻烦。 
 		3.ThreadLocalMap 类是ThreadLocal中定义的内部类，但是它的实例却用在Thread类中;
 		4.set()将该ThreadLocal实例作为key，要保持的对象作为值，设置到当前线程的ThreadLocalMap 中，get()通过key取出对象值

4.volatile与synchronize的区别
	1.volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。
	2.volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的
	3.volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性
	4.volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。
	5.volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化
	
5.Thread类有哪些静态方法，记熟。很容易出现
	1.currentThread()
		currentThread()方法返回的是对当前正在执行线程对象的引用。
	2.sleep(long millis)
		sleep(long millis)方法的作用是在指定的毫秒内让当前"正在执行的线程"休眠（暂停执行）。这个"正在执行的线程"是关键，指的是Thread.currentThread()返回的线程。sleep()会让出CPU资源，但是不会释放锁资源。
	3.yield()
		暂停当前执行的线程对象，并执行其他线程。这个暂停是会放弃CPU资源的，并且放弃CPU的时间不确定，有可能刚放弃，就获得CPU资源了，也有可能放弃好一会儿，才会被CPU执行。
	4.interrupted()
		测试当前线程是否已经中断，执行后具有将状态标识清除为false的功能。

6.线程和进程的区别:
	首先得知道什么是进程什么是线程，我的理解是进程是指在系统中正在运行的一个应用程序；程序一旦运行就是进程，或者更专业化来说：进程是指程序执行时的一个实例，是一个具有独立功能的程序关于某个数据集合的一次运行活动。它可以申请和拥有系统资源，是一个动态的概念，是一个活动的实体。进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时，它才能成为一个活动的实体，我们称其为进程。从内核的观点看，进程的目的就是担当分配系统资源（CPU时间、内存等）的基本单位。线程是系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。进程——资源分配的最小单位，线程——程序执行的最小单位。
	进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。
	线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。
	线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。
	多进程是指操作系统能同时运行多个任务（程序）。
	多线程是指在同一程序中有多个顺序流在执行。
	
7.Thread类
	public class MyThread extends Thread {  
	　　public void run() {  
	　　 System.out.println("MyThread.run()");  
	　　}  
	}  
	main(){
		MyThread myThread1 = new MyThread();  
		MyThread myThread2 = new MyThread();  
		myThread1.start();  
		myThread2.start();  
	}
	程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。随着调用MitiSay的两个对象的start方法，另外两个线程也启动了，这样，整个应用就在多线程下运行。
	 
	注意：start()方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。
	从程序运行的结果可以发现，多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。

	Thread.sleep()方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。

	我们在这里调用的是start()方法，但是实际上调用的还是run()方法的主体。
	那么：为什么我们不能直接调用run()方法呢？
	run()只是一个普通的方法,直接调用run()方法,系统并不会另开线程执行,而是会直接在本线程内执行run()方法内的内容,这样并没有达到我们想要开启多线程执行的目的。需要通过Thread类的start()方法,操作系统才会另开启一个线程来执行run()方法的内容。线程的运行需要本地操作系统的支持。如果你查看start的源代码的时候，会发现：此处调用的是start0()。并且这个这个方法用了native关键字，此关键字表示调用本地操作系统的函数。因为多线程的实现需要本地操作系统的支持。

8.Runnable接口
	通过Runnable启动多线程的步骤:
		1.继承Runnable接口,实现run()方法。再
		2.通过Thread类的构造方法Thread(Runnable)来构造出Thread对象。
		3.通过上面方法构造出的Thread对象的.start()方法来启动线程
	实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。

9.Thread和Runnable的区别
	在程序开发中只要是多线程肯定永远以实现Runnable接口为主，因为实现Runnable接口相比继承Thread类有如下好处：
		1.避免点继承的局限，一个类可以继承多个接口。
		2.适合于资源的共享
		
	如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。
	注意每个线程都是用同一个实例化对象，如果不是同一个，效果就和Thread的一样了！

10.线程状态转换
	1.新建状态(New):新创建了一个线程对象。
	2.就绪状态(Runnable):线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。
	3.运行状态(Running):就绪状态的线程获取了CPU，执行程序代码。
	4.阻塞状态(Blocked):阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：
		1).等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。
		2).同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。
		3).其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。
	5.死亡状态(Dead):线程执行完了或者因异常退出了run()方法，该线程结束生命周期。

11.线程调度
	1.调整线程优先级：Java线程有优先级，优先级高的线程会获得较多的运行机会。
		Java线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：
		static int MAX_PRIORITY 
		          线程可以具有的最高优先级，取值为10。 
		static int MIN_PRIORITY 
		          线程可以具有的最低优先级，取值为1。 
		static int NORM_PRIORITY 
		          分配给线程的默认优先级，取值为5。 
		Thread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。 
	2.线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪(Runnable)状态。sleep()平台移植性好。
	3.线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。这个两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0) 一样。
	4.线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。
	5.线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。
	6.线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个notifyAll()，唤醒在此对象监视器上等待的所有线程。
	 注意：Thread中suspend()和resume()两个方法在JDK1.5中已经废除，不再介绍。因为有死锁倾向。
	
12.常用函数说明
	sleep(): 强迫一个线程睡眠Ｎ毫秒。
	yield(): 使当前线程让出 CPU 占有权 
	isAlive(): 判断一个线程是否存活。 
	join(): 等待线程终止。 
	activeCount(): 程序中活跃的线程数。 
	enumerate(): 枚举程序中的线程。 
	currentThread(): 得到当前线程。 
	isDaemon(): 一个线程是否为守护线程。 
	setDaemon(): 设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束) 
	setName(): 为线程设置一个名称。 
	wait(): 强迫一个线程等待。 
	notify(): 通知一个线程继续运行。 
	setPriority(): 设置一个线程的优先级。

	12.1 sleep()和yield()的区别:
		sleep()使当前线程进入停滞状态，所以执行sleep()的线程在指定的时间内肯定不会被执行；yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。

	12.2 setPriority(): 更改线程的优先级。
		MIN_PRIORITY = 1
		NORM_PRIORITY = 5
		MAX_PRIORITY = 10
		
	12.3 wait()
		Obj.wait()，与Obj.notify()必须要与synchronized(Obj)一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作。
		从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){...}语句块内。
		从功能上来说wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。
		相应的notify()就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。这样就提供了在线程间同步、唤醒的操作。
		wait()方法是Object类里的方法;当一个线程执行到wait()方法时，它就进入到一个和该对象相关的等待池中，同时失去(释放)了对象的机锁(暂时失去机锁，wait(long timeout)超时时间到后还需要返还对象锁;其他线程可以访问;
	　　wait()使用notify或者notifyAlll或者指定睡眠时间来唤醒当前等待池中的线程。
	　　wiat()必须放在synchronized block中，否则会在program runtime时扔出”java.lang.IllegalMonitorStateException“异常。

	12.4 wait和sleep区别
		共同点： 
			1.他们都是在多线程的环境下，都可以在程序的调用处阻塞指定的毫秒数，并返回。 
			2.wait()和sleep()都可以通过interrupt()方法 打断线程的暂停状态 ，从而使线程立刻抛出InterruptedException。 
			  如果线程A希望立即结束线程B，则可以对线程B对应的Thread实例调用interrupt方法。如果此刻线程B正在wait/sleep /join，则线程B会立刻抛出InterruptedException，在catch() {} 中直接return即可安全地结束线程。 
			  需要注意的是，InterruptedException是线程自己从内部抛出的，并不是interrupt()方法抛出的。对某一线程调用 interrupt()时，如果该线程正在执行普通的代码，那么该线程根本就不会抛出InterruptedException。但是，一旦该线程进入到 wait()/sleep()/join()后，就会立刻抛出InterruptedException 。

		不同点： 
			1.Thread类的方法：sleep(),yield()等 
			   Object的方法：wait()和notify()等 
			2.每个对象都有一个锁来控制同步访问。Synchronized关键字可以和对象的锁交互,来实现线程的同步。 
			  sleep方法没有释放锁,而wait方法释放了锁,使得其他线程可以使用同步控制块或者方法。 
			3.wait,notify和notifyAll只能在同步控制方法或者同步控制块里面使用,而sleep可以在任何地方使用 
			4.sleep必须捕获异常,而wait,notify和notifyAll不需要捕获异常

		所以sleep()和wait()方法的最大区别是:
			sleep()睡眠时,保持对象锁,仍然占有该锁;
			而wait()睡眠时,释放对象锁。
			但是wait()和sleep()都可以通过interrupt()方法打断线程的暂停状态,从而使线程立刻抛出InterruptedException（但不建议使用该方法）。

13.常见线程名词解释
	主线程:JVM调用程序main()所产生的线程。
	当前线程:这个是容易混淆的概念。一般指通过Thread.currentThread()来获取的进程。
	后台线程:指为其他线程提供服务的线程,也称为守护线程。JVM的垃圾回收线程就是一个后台线程。用户线程和守护线程的区别在于,是否等待主线程依赖于主线程结束而结束
	前台线程:是指接受后台线程服务的线程,其实前台后台线程是联系在一起,就像傀儡和幕后操纵者一样的关系。傀儡是前台线程、幕后操纵者是后台线程。由前台线程创建的线程默认也是前台线程。可以通过isDaemon()和setDaemon()方法来判断和设置一个线程是否为后台线程。
